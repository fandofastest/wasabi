import tagBuilder from './utils/tagBuilder'

export default class FullTextSearch {
  constructor(list) {
    this.list = list
    this.tags = tagBuilder.build(list)
  }

  filter(query) {
    let result = []
    Object.keys(this.tags).forEach(index => {
      let compiled = { index: index, value: 0 }
      query.split(' ').forEach(term => {
        this.tags[index].forEach(tag => {
          if (tag.isMatch()) {
            compiled.value += tag.name === term ? 1 : 0
          } else if (tag.isContains()) {
            if (tag.name === term) {
              compiled.value += 1
            } else if (tag.name.startsWith(term)) {
              compiled.value += 0.75
            } else {
              compiled.value += tag.name.indexOf(term) > 0 ? 0.5 : 0
            }
          }
        })
      })
      result.push(compiled)
    })
    result.sort((a, b) => {
      return b.value - a.value
    })
    return result.filter(r => r.value > 0).map(r => this.list[r.index])
  }
}