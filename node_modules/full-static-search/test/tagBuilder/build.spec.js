import validateTagList from '../_helper/validateTagList'
import tagBuilder from '../../src/utils/tagBuilder'

describe('tagBuilder.build', () => {
  it('should create empty reference', () => {
    const expected = { 0: [] }
    const results = tagBuilder.build([{}])

    validateTagList(expected, results)
  })

  it('should create empty reference', () => {
    const expected = { 0: [] }
    const results = tagBuilder.build([null])

    validateTagList(expected, results)
  })

  it('should create string reference', () => {
    const expected = { 0: [{ name: 'my name', type: 'CONTAINS' }] }
    const results = tagBuilder.build([{ name: 'my name' }])

    validateTagList(expected, results)
  })

  it('should create boolean false reference', () => {
    const expected = { 0: [{ name: '!dead', type: 'MATCH' }] }
    const results = tagBuilder.build([{ dead: false }])

    validateTagList(expected, results)
  })

  it('should create boolean true reference', () => {
    const expected = { 0: [{ name: 'champion', type: 'MATCH' }] }
    const results = tagBuilder.build([{ champion: true }])

    validateTagList(expected, results)
  })

  it('should create number reference', () => {
    const expected = { 0: [
      { name: '24', type: 'MATCH' },
      { name: 'age=24', type: 'MATCH' },
      { name: 'age>', type: 'FUNCTION' }
    ] }
    const results = tagBuilder.build([{ age: 24 }])

    validateTagList(expected, results)
  })

  it('should create all reference', () => {
    const expected = { 0: [
      { name: 'Anakin', type: 'CONTAINS' },
      { name: '!sith', type: 'MATCH' },
      { name: 'jedi', type: 'MATCH' },
      { name: '16', type: 'MATCH' },
      { name: 'age=16', type: 'MATCH' },
      { name: 'age>', type: 'FUNCTION' }
    ] }
    const results = tagBuilder.build([{ name: 'Anakin', sith: false, jedi: true, age: 16 }])

    validateTagList(expected, results)
  })
})