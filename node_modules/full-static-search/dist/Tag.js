'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _enum = require('enum');

var _enum2 = _interopRequireDefault(_enum);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var types = new _enum2.default(['MATCH', 'CONTAINS', 'FUNCTION']);

var Tag = function () {
  function Tag(name, type) {
    var _this = this;

    _classCallCheck(this, Tag);

    this.isMatch = function () {
      return Tag.types.MATCH.is(_this.type);
    };

    this.isContains = function () {
      return Tag.types.CONTAINS.is(_this.type);
    };

    this.isFunction = function () {
      return Tag.types.FUNCTION.is(_this.type);
    };

    this.name = name;
    this.type = type;
  }

  _createClass(Tag, [{
    key: 'withFunction',
    value: function withFunction(func) {
      this.func = func;
      return this;
    }
  }]);

  return Tag;
}();

Tag.types = types;
exports.default = Tag;