'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tagBuilder = require('./utils/tagBuilder');

var _tagBuilder2 = _interopRequireDefault(_tagBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FullTextSearch = function () {
  function FullTextSearch(list) {
    _classCallCheck(this, FullTextSearch);

    this.list = list;
    this.tags = _tagBuilder2.default.build(list);
  }

  _createClass(FullTextSearch, [{
    key: 'filter',
    value: function filter(query) {
      var _this = this;

      var result = [];
      Object.keys(this.tags).forEach(function (index) {
        var compiled = { index: index, value: 0 };
        query.split(' ').forEach(function (term) {
          _this.tags[index].forEach(function (tag) {
            if (tag.isMatch()) {
              compiled.value += tag.name === term ? 1 : 0;
            } else if (tag.isContains()) {
              if (tag.name === term) {
                compiled.value += 1;
              } else if (tag.name.startsWith(term)) {
                compiled.value += 0.75;
              } else {
                compiled.value += tag.name.indexOf(term) > 0 ? 0.5 : 0;
              }
            }
          });
        });
        result.push(compiled);
      });
      result.sort(function (a, b) {
        return b.value - a.value;
      });
      return result.filter(function (r) {
        return r.value > 0;
      }).map(function (r) {
        return _this.list[r.index];
      });
    }
  }]);

  return FullTextSearch;
}();

exports.default = FullTextSearch;